<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class DocumentDeepEmbeddedDocumentHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data)
    {
        $hydratedData = array();

        /** @Field(type="string") */
        if (isset($data['field0'])) {
            $value = $data['field0'];
            $return = (string) $value;
            $this->class->reflFields['field0']->setValue($document, $return);
            $hydratedData['field0'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['field1'])) {
            $value = $data['field1'];
            $return = (string) $value;
            $this->class->reflFields['field1']->setValue($document, $return);
            $hydratedData['field1'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['field2'])) {
            $value = $data['field2'];
            $return = (string) $value;
            $this->class->reflFields['field2']->setValue($document, $return);
            $hydratedData['field2'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['field3'])) {
            $value = $data['field3'];
            $return = (string) $value;
            $this->class->reflFields['field3']->setValue($document, $return);
            $hydratedData['field3'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['field4'])) {
            $value = $data['field4'];
            $return = (string) $value;
            $this->class->reflFields['field4']->setValue($document, $return);
            $hydratedData['field4'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['field5'])) {
            $value = $data['field5'];
            $return = (string) $value;
            $this->class->reflFields['field5']->setValue($document, $return);
            $hydratedData['field5'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['field6'])) {
            $value = $data['field6'];
            $return = (string) $value;
            $this->class->reflFields['field6']->setValue($document, $return);
            $hydratedData['field6'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['field7'])) {
            $value = $data['field7'];
            $return = (string) $value;
            $this->class->reflFields['field7']->setValue($document, $return);
            $hydratedData['field7'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['field8'])) {
            $value = $data['field8'];
            $return = (string) $value;
            $this->class->reflFields['field8']->setValue($document, $return);
            $hydratedData['field8'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['field9'])) {
            $value = $data['field9'];
            $return = (string) $value;
            $this->class->reflFields['field9']->setValue($document, $return);
            $hydratedData['field9'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['embeddedOne'])) {
            $embeddedDocument = $data['embeddedOne'];
            $className = $this->dm->getClassNameFromDiscriminatorValue($this->class->fieldMappings['embeddedOne'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument);
            $this->unitOfWork->registerManaged($return, null, $embeddedData);
            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['embeddedOne'], $document, 'embeddedOne');

            $this->class->reflFields['embeddedOne']->setValue($document, $return);
            $hydratedData['embeddedOne'] = $return;
        }
        return $hydratedData;
    }
}